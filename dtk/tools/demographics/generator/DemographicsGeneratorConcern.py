import abc
from copy import copy, deepcopy
from typing import Callable


class DemographicsGeneratorConcern:
    """
    Base class for all DemographicsGeneratorConcern.

    A DemographicsGeneratorConcern is a configuration generator that deals with the final stages of generation and wraps
    a specific set of dependent/complementary configuration elements together into a single unit. At this
    stage, the whole demographics object has been built as a dictionary. This is then passed to implementation's
    of this class. This is useful for any kind of configuration that may depend on all the nodes, individual attributes
    etc, to be generated.

    """
    @abc.abstractmethod
    def update_demographics(self, demographics: dict):
        """
        The function that process the demographics. Demographics object should be updated in place
        Args:
            demographics:

        Returns:

        """
        pass


class DemographicsGeneratorConcernChain(DemographicsGeneratorConcern):
    """
    Allows chaining of DemographicsGeneratorConcern
    """
    def __init__(self, *args: DemographicsGeneratorConcern):
        """
        Chains a set of DemographicsGeneratorConcern together. The concerns should be passed in order
        as arguments to the init function
        Args:
            *args: A

        Examples:
            ```
            def print_demo_msg(demographics, message='hello'):
                print(demographics)
                print(message

            chain = DemographicsGeneratorConcernChain(
                LambdaDemographicsGeneratorConcern(fn),
                LambdaDemographicsGeneratorConcern(fn, message='Example arg')
            )
            ```
        """
        if any([not isinstance(arg, DemographicsGeneratorConcern) for arg in args] + [len(args) == 0]):
            raise ValueError("All concerns must be of type DemographicsGeneratorConcern")
        self.concerns = list(args)

    def update_demographics(self, demographics: dict):
        """
        Executes update_demographics from each concern in defintion order
        Args:
            demographics: Demographics to be updated

        Returns:

        """
        for concern in self.concerns:
            concern.update_demographics(demographics)


class LambdaDemographicsGeneratorConcern(DemographicsGeneratorConcern):
    """
    Utility concern allowing you to pass in a function and a set of kwargs to execute as keyword arguments to the
    specified function
    """
    def __init__(self, func: Callable[[dict, ], None], **kwargs):
        """
        Initialized our LambdaDemographicsGeneratorConcern

        This will executed the specified function against the demographics file
        Args:
            func: This is the function that will be called on update_demographics. This function should take the
            demographics object as the first parameter
            **kwargs: A set of keywords to be passed to the func

        Examples:
            ``
            def print_demo_msg(demographics, message='hello'):
                print(demographics)

            gen = LambdaDemographicsGeneratorConcern(fn, message='Example arg')
            )
            ```
        """
        super().__init__()
        self. func = func
        self.kwargs = kwargs if kwargs else {}

    def new_instance_from_kwargs(self, **kwargs):
        """
        Utility function to easily duplicate a LambdaDemographicsGeneratorConcern except with different
        Keyword argument values. This is useful when using the demographics_generator_concern to wrap functions that
        may need to be referenced multiple times but with different values

        Args:
            **kwargs: Set of keyword arguments to update

        Returns:
            A new LambdaDemographicsGeneratorConcern object

        Examples:
            ```
            @demographics_generator_concern
            def print_demo_msg(demographics, message='hello'):
                print(demographics)

            chain =  DemographicsGeneratorConcernChain(
                # This will resolve to a LambdaDemographicsGeneratorConcern generated by the
                # demographics_generator_concern decorator
                print_demo_msg,
                # We want a second one with a different message, so we call our new_instance
                print_demo_msg.new_instance_from_kwargs(message='Example')
            )
            ```

        See Also:
            demographics_generator_concern

        """
        final_args = deepcopy(self.kwargs)
        final_args.update(kwargs)
        return LambdaDemographicsGeneratorConcern(self.func, **kwargs)

    def update_demographics(self, demographics: dict):
        """
        Calls the function that will update the demographics dictionary along with any keyword arguments

        Args:
            demographics: Demographics dictionary to update

        Returns:
            None
        """
        self.func(demographics, **self.kwargs)

    def __call__(self, *args, **kwargs):
        kwargs.update(self.kwargs)
        self.func(*args, **kwargs)


def demographics_generator_concern(**custom_args) -> Callable:
    """
    Decorator used to create a LambdaDemographicsGeneratorConcern from a function

    Args:
        **custom_args: Optional set of keyword arguments to pass on to the function

    Returns:
        LambdaDemographicsGeneratorConcern in place of function
    Examples:
            ```
            @demographics_generator_concern
            def print_demo_msg(demographics, message='hello'):
                print(demographics)

            chain =  DemographicsGeneratorConcernChain(
                # This will resolve to a LambdaDemographicsGeneratorConcern generated by the
                # demographics_generator_concern decorator
                print_demo_msg,
                # We want a second one with a different message, so we call our new_instance
                print_demo_msg.new_instance_from_kwargs(message='Example')
            )
            ```

    """

    def dg_builder_decorator(func) -> LambdaDemographicsGeneratorConcern:
        dg_obj = LambdaDemographicsGeneratorConcern(func, **custom_args)
        return dg_obj
    return dg_builder_decorator